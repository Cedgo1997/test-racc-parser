#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class ArithmeticParser < Racc::Parser
##### State transition tables begin ###

def next_token
  @tokens.shift # Elimina y devuelve el primer elemento del array
end

racc_action_table = [
     2,     3,     4,     5,     7,     8,     9 ]

racc_action_check = [
     0,     1,     2,     3,     4,     7,     8 ]

racc_action_pointer = [
    -2,     1,    -1,     3,     0,   nil,   nil,     0,     2,   nil ]

racc_action_default = [
    -3,    -3,    -3,    -3,    -3,    10,    -1,    -3,    -3,    -2 ]

racc_goto_table = [
     1,     6 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,    -3 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  3, 8, :_reduce_2 ]

racc_reduce_n = 3

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :TkIdent => 2,
  :TkAsignacion => 3,
  :TkNumLit => 4,
  :TkMas => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "TkIdent",
  "TkAsignacion",
  "TkNumLit",
  "TkMas",
  "$start",
  "assignment",
  "expression" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_1(val, _values, result)
                result = Assignment.new(val[0], val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_2(val, _values, result)
                result = ArithmeticBinary.new(val[1], val[0], val[2])

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ArithmeticParser
